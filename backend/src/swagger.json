{
  "swagger": "2.0",
  "info": {
    "title": "Collaborator",
    "description": "Swagger Collaborator API",
    "version": "1.0.0"
  },
  "host": "localhost:3001",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/user/": {
      "get": {
        "description": "Get a specific the user information by token",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved data. You will receive an user object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Cannot find the user. You will receive an err message",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      },
      "post": {
        "description": "Create a new user",
        "parameters": [
          {
            "name": "User Data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully created. You will receive the new user object.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Registration failed, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      },
      "put": {
        "description": "Modify a user's info, you can only modify certain fields",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "User Info",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update successful. You will receive the new user object.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Update failed, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user information, you will receive 204 when deleted",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deletion successful. There will be no return value"
          },
          "400": {
            "description": "Deletion failed, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/user/password": {
      "put": {
        "description": "Modify a user's password",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "example": "new password"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update successful. You will receive the new password object.",
            "schema": {
              "$ref": "#/definitions/Password"
            }
          },
          "400": {
            "description": "Update failed, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "description": "Login using userEmail and password",
        "parameters": [
          {
            "name": "Login Info",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userEmail": {
                  "type": "string",
                  "example": "Example@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "xxxxxx"
                }
              },
              "required": [
                "userEmail",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully logged in. You will receive a token.",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "something secret"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Login failed, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/user/all": {
      "get": {
        "description": "Get all the user information, only admin can access",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all users. You will receive an array of user objects"
          },
          "400": {
            "description": "Falied to retrieve all users. You will receive an err message",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          },
          "403": {
            "description": "You are not an admin user. You will receive an err message",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/user/post/all": {
      "get": {
        "description": "Get all the posts from all the users.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/user/post/": {
      "get": {
        "description": "Get all the posts for you.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "description": "Create a post!",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Post Data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postCaption": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Post successfully created. You will receive the new post object.",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Failed to create a post, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/user/post/{postId}": {
      "put": {
        "description": "Modify a post's info, you can only modify certain fields",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Post data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postCaption": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update successful. You will receive the new post object.",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Update failed, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      },
      "delete": {
        "description": "Delete post information, you will receive 204 when deleted",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deletion successful. There will be no return value"
          },
          "400": {
            "description": "Deletion failed, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/user/connection/suggested": {
      "get": {
        "description": "Get all the users except for the ones you have connections with.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all suggested users. You will receive an array of user objects",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "400": {
            "description": "Falied to retrieve all suggested users. You will receive an err message",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/user/connection/": {
      "post": {
        "description": "Create a new connection request",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Connection Request Data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "receiverId": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Connection request successfully created. You will receive the new connection object.",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "400": {
            "description": "Failed to send a connection request, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      },
      "get": {
        "description": "Get all the connections including the ones you have not accepted.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all connections. You will receive an array of connection objects",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "400": {
            "description": "Falied to retrieve all connections. You will receive an err message",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/user/connection/{receiverId}": {
      "put": {
        "description": "Accept a connection request, you will receive 200 when Accepted.",
        "parameters": [
          {
            "name": "receiverId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Accept successfully. There will be no return value"
          },
          "400": {
            "description": "Accept failed, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      },
      "delete": {
        "description": "Cancel a connection request, you will receive 200 when canceled.",
        "parameters": [
          {
            "name": "receiverId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cancelation successful. There will be no return value"
          },
          "400": {
            "description": "Cancelation failed, it might be caused by anything. You will receive an err message.",
            "schema": {
              "$ref": "#/definitions/Err"
            }
          }
        }
      }
    },
    "/user/comment/{postId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/user/comment/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "commentContent": {
                  "example": "any"
                },
                "postId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "commenterId": {
                  "example": "any"
                },
                "authorId": {
                  "example": "any"
                },
                "commentId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/user/postLike/{postId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/user/postLike/all/{postId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/user/postLike/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "postId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "postId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/project/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "projectAuthorId": {
                  "example": "any"
                },
                "projectName": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    }
  },
  "definitions": {
    "Post": {
      "type": "object",
      "properties": {
        "authorId": {
          "type": "string",
          "example": "998e44ca-a823-4ad5-a6eb-f3e2b7a0c9ab"
        },
        "postDate": {
          "type": "string",
          "example": "1978-02-05"
        },
        "postCaption": {
          "type": "string",
          "example": "Iusto in et omnis aut vel exercitationem quia."
        },
        "postLikeCount": {
          "type": "number",
          "example": 8
        },
        "postComments": {
          "type": "array",
          "example": [
            "Et excepturi ut laudantium eum minima repudiandae minus quia eos."
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "authorId",
        "postDate",
        "postCaption",
        "postLikeCount",
        "postComments"
      ]
    },
    "Project": {
      "type": "object",
      "properties": {
        "projectName": {
          "type": "string",
          "example": "Quos et quas atque."
        },
        "projectLink": {
          "type": "string",
          "example": "Langworth_Rosamond@gmail.com"
        },
        "projectAutherId": {
          "type": "string",
          "example": "6cf1e3a0-a360-47ef-ab7c-6579e22caf4a"
        },
        "projectLikesCount": {
          "type": "number",
          "example": 4
        },
        "projectStartDate": {
          "type": "string",
          "example": "2004-06-14"
        },
        "projectDescription": {
          "type": "string",
          "example": "Numquam velit esse id. Aut debitis quam voluptatem sit ab quam omnis esse. Voluptatem quisquam reprehenderit iusto similique in amet voluptatem veritatis."
        },
        "isProjectFinished": {
          "type": "boolean",
          "example": false
        }
      },
      "required": [
        "projectName",
        "projectLink",
        "projectAutherId",
        "projectLikesCount",
        "projectStartDate",
        "projectDescription",
        "isProjectFinished"
      ]
    },
    "Skill": {
      "type": "object",
      "properties": {
        "skillName": {
          "type": "string",
          "example": "pt"
        },
        "skillLevel": {
          "type": "number",
          "example": 1
        },
        "skillDescription": {
          "type": "string",
          "example": "Incidunt aliquam ab necessitatibus natus in veniam."
        }
      },
      "required": [
        "skillName",
        "skillLevel",
        "skillDescription"
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "userEmail": {
          "type": "string",
          "example": "Hilda.Aufderhar@yahoo.com"
        },
        "userFirstName": {
          "type": "string",
          "example": "Skyla"
        },
        "userLastName": {
          "type": "string",
          "example": "Reynolds"
        },
        "userBirthday": {
          "type": "string",
          "example": "2010-09-15"
        },
        "userPhone": {
          "type": "string",
          "example": "934-353-2744"
        },
        "userStory": {
          "type": "string",
          "example": "Iusto debitis quos et esse error. Mollitia consequatur non qui. Ratione odit saepe dolorem ut. Quasi possimus magni aspernatur qui."
        },
        "userAvatarImg": {
          "type": "string",
          "example": "Voluptatem quibusdam voluptatem sit commodi."
        },
        "password": {
          "type": "string",
          "example": "2Una48"
        },
        "userProjectCount": {
          "type": "number",
          "example": 4
        },
        "acorns": {
          "type": "number",
          "example": 5
        },
        "userLevel": {
          "type": "number",
          "example": 1
        }
      },
      "required": [
        "userEmail",
        "userFirstName",
        "password",
        "userProjectCount",
        "acorns",
        "userLevel"
      ]
    },
    "Connection": {
      "type": "object",
      "properties": {
        "senderId": {
          "type": "string",
          "example": "f71daf8c-02e0-4623-a5f5-46f2ef6ae6c1"
        },
        "receiverId": {
          "type": "string",
          "example": "02f93466-c9a6-4565-b2c6-8d3735a7ac5e"
        },
        "accepted": {
          "type": "boolean",
          "example": true
        },
        "userIds": {
          "type": "array",
          "example": [
            "b5df072c-d149-4aeb-aaa4-89f398b5b7ea",
            "187a5e68-4415-4a47-9a75-0dde3662dccb"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Password": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "45252610-ff1e-4c96-b128-a974e32e6f19"
        },
        "hash": {
          "type": "string",
          "example": "4Citlalli04"
        }
      },
      "required": [
        "userId",
        "hash"
      ]
    },
    "Err": {
      "type": "object",
      "properties": {
        "err": {
          "type": "string",
          "example": "Something is wrong...."
        }
      }
    }
  }
}